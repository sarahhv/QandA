{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\sarah\\\\Dropbox\\\\WD\\\\advanced web\\\\code\\\\QandA\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\sarah\\\\Dropbox\\\\WD\\\\advanced web\\\\code\\\\QandA\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\sarah\\\\Dropbox\\\\WD\\\\advanced web\\\\code\\\\QandA\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\sarah\\\\Dropbox\\\\WD\\\\advanced web\\\\code\\\\QandA\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\sarah\\\\Dropbox\\\\WD\\\\advanced web\\\\code\\\\QandA\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\sarah\\\\Dropbox\\\\WD\\\\advanced web\\\\code\\\\QandA\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\sarah\\\\Dropbox\\\\WD\\\\advanced web\\\\code\\\\QandA\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Router}from\"@reach/router\";import Questions from\"./Questions\";import Question from\"./Question\";import AskQuestion from\"./AskQuestion\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));_this.state={questions:[]};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){this.getData();}//Fetch data from the API and putting it in the state\n},{key:\"getData\",value:function(){var _getData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var url,response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=\"/api/questions\";_context.next=3;return fetch(url);case 3:response=_context.sent;_context.next=6;return response.json();case 6:data=_context.sent;this.setState({questions:data});case 8:case\"end\":return _context.stop();}}},_callee,this);}));function getData(){return _getData.apply(this,arguments);}return getData;}()},{key:\"addQuestion\",value:function addQuestion(title){var newQuestion={title:title,answers:[]};this.postQuestion(newQuestion);}//Used this before API\n/*        this.setState({\r\n            questions: [...this.state.questions, newQuestion]\r\n        });\r\n        // console.log(newQuestion);*/},{key:\"getQuestion\",value:function getQuestion(id){var findFunction=function findFunction(question){return question._id===id;};return this.state.questions.find(findFunction);}},{key:\"postAnswer\",value:function(){var _postAnswer=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id,answer){var url,response,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"postAnswer\",id,answer);url=\"/api/question/\".concat(id,\"/answers\");_context2.next=4;return fetch(url,{headers:{'Content-type':'application/json'},method:'POST',body:JSON.stringify({answer:answer})});case 4:response=_context2.sent;_context2.next=7;return response.json();case 7:data=_context2.sent;console.log(\"Printing the response\",data);this.getData();case 10:case\"end\":return _context2.stop();}}},_callee2,this);}));function postAnswer(_x,_x2){return _postAnswer.apply(this,arguments);}return postAnswer;}()},{key:\"postQuestion\",value:function(){var _postQuestion=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(question){var url,response,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:console.log(\"postQuestion\",question);url=\"/api/question\";_context3.next=4;return fetch(url,{headers:{'Content-type':'application/json'},method:'POST',body:JSON.stringify({question:question})});case 4:response=_context3.sent;_context3.next=7;return response.json();case 7:data=_context3.sent;console.log(\"Printing the response\",data);this.getData();case 10:case\"end\":return _context3.stop();}}},_callee3,this);}));function postQuestion(_x3){return _postQuestion.apply(this,arguments);}return postQuestion;}()},{key:\"putVote\",value:function(){var _putVote=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(qId,answer,vote){var aId,url,response,data;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:console.log(\"PutVote\",answer,vote);aId=answer._id;url=\"/api/question/\".concat(qId,\"/answers/\").concat(aId);_context4.next=5;return fetch(url,{headers:{'Content-type':'application/json'},method:'PUT',body:JSON.stringify({vote:vote})});case 5:response=_context4.sent;_context4.next=8;return response.json();case 8:data=_context4.sent;console.log(\"Putting the response\",data);this.getData();case 11:case\"end\":return _context4.stop();}}},_callee4,this);}));function putVote(_x4,_x5,_x6){return _putVote.apply(this,arguments);}return putVote;}()//Used this before i had an API\n/*    updateQuestion(id, newAnswer) {\r\n        var questionsArr = this.state.questions.filter(q => {\r\n            return q.id !== id;\r\n        });\r\n\r\n        var question = this.state.questions.find(q => {\r\n            return q.id === id;\r\n        });\r\n\r\n        question.answers = [...question.answers, newAnswer];\r\n\r\n        questionsArr = [...questionsArr, question];\r\n\r\n        this.setState({\r\n            questions: questionsArr\r\n        });\r\n    }*/},{key:\"render\",value:function render(){var _this2=this;return React.createElement(React.Fragment,null,React.createElement(\"h1\",null,\"Question and answers app\"),React.createElement(Router,null,React.createElement(Questions,{path:\"/\",data:this.state.questions}),React.createElement(Question,{path:\"/question/:id\",getQuestion:function getQuestion(id){return _this2.getQuestion(id);},postAnswer:function postAnswer(id,text){return _this2.postAnswer(id,text);},putVote:function putVote(qId,answer,vote){return _this2.putVote(qId,answer,vote);}}),React.createElement(AskQuestion,{path:\"/Ask-a-question\",submit:function submit(title){return _this2.addQuestion(title);}})),React.createElement(\"div\",null));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["C:/Users/sarah/Dropbox/WD/advanced web/code/QandA/client/src/App.js"],"names":["React","Component","Router","Questions","Question","AskQuestion","App","props","state","questions","getData","url","fetch","response","json","data","setState","title","newQuestion","answers","postQuestion","id","findFunction","question","_id","find","answer","console","log","headers","method","body","JSON","stringify","qId","vote","aId","getQuestion","text","postAnswer","putVote","addQuestion"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Router} from \"@reach/router\";\r\nimport Questions from \"./Questions\";\r\nimport Question from \"./Question\";\r\nimport AskQuestion from \"./AskQuestion\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            questions: [\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n\r\n    //Fetch data from the API and putting it in the state\r\n    async getData() {\r\n        const url = \"/api/questions\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        this.setState({\r\n            questions: data\r\n        })\r\n    }\r\n\r\n    addQuestion(title) {\r\n        const newQuestion = {\r\n                title: title,\r\n                answers: []\r\n        };\r\n        this.postQuestion(newQuestion);\r\n    }\r\n//Used this before API\r\n/*        this.setState({\r\n            questions: [...this.state.questions, newQuestion]\r\n        });\r\n        // console.log(newQuestion);*/\r\n\r\n\r\n    getQuestion(id) {\r\n        const findFunction = question => question._id === id;\r\n        return this.state.questions.find(findFunction);\r\n    }\r\n\r\n    async postAnswer(id, answer) {\r\n        console.log(\"postAnswer\", id, answer);\r\n        const url = `/api/question/${id}/answers`;\r\n\r\n        const response = await fetch(url, {\r\n            headers: {\r\n                'Content-type' : 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                answer: answer\r\n            })\r\n        });\r\n        const data = await response.json();\r\n        console.log(\"Printing the response\", data);\r\n        this.getData();\r\n    }\r\n\r\n    async postQuestion(question) {\r\n        console.log(\"postQuestion\", question);\r\n        const url = `/api/question`;\r\n\r\n        const response = await fetch(url, {\r\n            headers: {\r\n                'Content-type' : 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                question: question\r\n            })\r\n        });\r\n        const data = await response.json();\r\n        console.log(\"Printing the response\", data);\r\n        this.getData();\r\n    }\r\n\r\n    async putVote (qId, answer, vote) {\r\n        console.log(\"PutVote\", answer, vote);\r\n        const aId = answer._id;\r\n        const url = `/api/question/${qId}/answers/${aId}`;\r\n\r\n        const response = await fetch(url, {\r\n            headers: {\r\n                'Content-type' : 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                vote: vote\r\n            })\r\n        });\r\n        const data = await response.json();\r\n        console.log(\"Putting the response\", data);\r\n        this.getData();\r\n    }\r\n\r\n//Used this before i had an API\r\n/*    updateQuestion(id, newAnswer) {\r\n        var questionsArr = this.state.questions.filter(q => {\r\n            return q.id !== id;\r\n        });\r\n\r\n        var question = this.state.questions.find(q => {\r\n            return q.id === id;\r\n        });\r\n\r\n        question.answers = [...question.answers, newAnswer];\r\n\r\n        questionsArr = [...questionsArr, question];\r\n\r\n        this.setState({\r\n            questions: questionsArr\r\n        });\r\n    }*/\r\n\r\n    render() {\r\n    return(\r\n        <>\r\n            <h1>Question and answers app</h1>\r\n            <Router>\r\n                <Questions path=\"/\" data={this.state.questions}></Questions>\r\n                <Question path=\"/question/:id\"\r\n                          getQuestion={(id) => this.getQuestion(id)}\r\n                          postAnswer={(id, text) => this.postAnswer(id, text)}\r\n                          putVote={(qId, answer, vote) => this.putVote(qId, answer, vote)}\r\n                >\r\n                </Question>\r\n                <AskQuestion path=\"/Ask-a-question\" submit={(title) => this.addQuestion(title)}></AskQuestion>\r\n            </Router>\r\n            <div>\r\n            </div>\r\n        </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}