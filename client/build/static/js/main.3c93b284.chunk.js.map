{"version":3,"sources":["Questions.js","PostAnswer.js","Question.js","AskQuestion.js","App.js","index.js"],"names":["Questions","list","this","props","data","map","elm","key","_id","to","title","Component","PostAnswer","state","answer","event","setState","target","name","value","submit","type","placeholder","onChange","onClick","_","onSubmit","Question","aId","question","answers","find","a","vote","console","log","putVote","text","newAnswer","postAnswer","getQuestion","id","answersList","index","upVote","style","marginLeft","margin","downVote","path","addAnswer","AskQuestion","App","questions","getData","fetch","response","json","newQuestion","postQuestion","url","headers","method","body","JSON","stringify","qId","addQuestion","ReactDOM","render","document","getElementById"],"mappings":"gPAwBeA,E,iLAnBP,IAMIC,EADYC,KAAKC,MAAMC,KACNC,KAND,SAAAC,GAAG,OACnB,wBAAIC,IAAKD,EAAIE,KACT,kBAAC,IAAD,CAAMC,GAAI,aAAaH,EAAIE,KAAMF,EAAII,WAM7C,OACI,oCACI,4BACKT,GAEL,kBAAC,IAAD,CAAMQ,GAAG,mBAAT,uB,GAfQE,a,QC8BTC,E,YA7BX,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KACDU,MAAQ,CACTC,OAAQ,IAHG,E,sEAOVC,GACLb,KAAKc,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,U,iCAKtCjB,KAAKC,MAAMiB,OAAOlB,KAAKW,MAAMC,U,+BAGvB,IAAD,OACL,OACI,oCACI,2BAAOO,KAAK,OAAOC,YAAY,cAAcJ,KAAK,SAASK,SAAU,SAAAR,GAAK,OAAI,EAAKQ,SAASR,MAC5F,6BACA,4BAAQS,QAAS,SAAAC,GAAC,OAAI,EAAKC,aAA3B,cACA,kC,GAxBSf,aCqDVgB,E,+KAnDJC,EAAKC,GACR,IAAIf,EAASe,EAASC,QAAQC,MAAK,SAAAC,GAAC,OAAIA,EAAExB,MAAQoB,KAC9CK,EAAOnB,EAAOmB,KAAO,EACzBC,QAAQC,IAAIP,EAAK,YAAad,EAAQmB,GACtC/B,KAAKC,MAAMiC,QAAQP,EAASrB,IAAKM,EAAQmB,K,+BAGpCL,EAAKC,GACV,IAAIf,EAASe,EAASC,QAAQC,MAAK,SAAAC,GAAC,OAAIA,EAAExB,MAAQoB,KAC9CK,EAAOnB,EAAOmB,KAAO,EACzBC,QAAQC,IAAIP,EAAK,YAAad,EAAQmB,GACtC/B,KAAKC,MAAMiC,QAAQP,EAASrB,IAAKM,EAAQmB,K,gCAGnCI,EAAMR,GACZ,IAAMS,EAAY,CACdD,KAAMA,EACNJ,KAAM,GAEV/B,KAAKC,MAAMoC,WAAWV,EAASrB,IAAK8B,K,+BAI9B,IAAD,OACCT,EAAW3B,KAAKC,MAAMqC,YAAYtC,KAAKC,MAAMsC,IAQ/CC,EAAcb,EAASC,QAAQzB,KAPf,SAACS,EAAQ6B,GAAT,OAChB,wBAAIpC,IAAKoC,GACJ7B,EAAOuB,KACR,4BAAQb,QAAS,kBAAM,EAAKoB,OAAO9B,EAAON,IAAKqB,IAAWgB,MAAO,CAACC,WAAY,QAA9E,MACA,0BAAMD,MAAO,CAACE,OAAQ,UAAWjC,EAAOmB,MACxC,4BAAQT,QAAS,kBAAM,EAAKwB,SAASlC,EAAON,IAAKqB,KAAjD,YAIR,OACI,oCACI,4BAAKA,EAASnB,OACd,wCACA,4BACKgC,GAEL,kBAAC,EAAD,CAAYO,KAAK,IAAI7B,OAAQ,SAACN,GAAD,OAAY,EAAKoC,UAAUpC,EAAQe,MAChE,6BAAK,6BAGL,kBAAC,IAAD,CAAMpB,GAAG,KAAT,0B,GA9COE,aCiCRwC,E,YAjCX,WAAYhD,GAAQ,IAAD,8BACf,4CAAMA,KACDU,MAAQ,CACTH,MAAO,IAHI,E,sEAOVK,GACLb,KAAKc,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,U,iCAKtCjB,KAAKC,MAAMiB,OAAOlB,KAAKW,MAAMH,S,+BAIvB,IAAD,OACL,OACI,oCACI,6CACA,2BAAOW,KAAK,OAAOC,YAAY,gBAAgBJ,KAAK,QAAQK,SAAU,SAAAR,GAAK,OAAI,EAAKQ,SAASR,MAC7F,6BACA,kBAAC,IAAD,CAAMN,GAAG,KAAI,4BAAQe,QAAS,SAAAC,GAAC,OAAI,EAAKC,aAA3B,iBACb,6BAAK,6BACL,kBAAC,IAAD,CAAMjB,GAAG,KAAT,iB,GA3BUE,aC6IXyC,E,YAzIX,WAAYjD,GAAQ,IAAD,8BACf,4CAAMA,KAEDU,MAAQ,CACTwC,UAAW,IAJA,E,iFAUfnD,KAAKoD,Y,wJAKO,iB,SACWC,MADX,kB,cACNC,E,gBACaA,EAASC,O,OAAtBrD,E,OACNF,KAAKc,SAAS,CACVqC,UAAWjD,I,wIAIPM,GACR,IAAMgD,EAAc,CACZhD,MAAOA,EACPoB,QAAS,IAEjB5B,KAAKyD,aAAaD,K,kCASVjB,GAER,OAAOvC,KAAKW,MAAMwC,UAAUtB,MADP,SAAAF,GAAQ,OAAIA,EAASrB,MAAQiC,O,0EAIrCA,EAAI3B,G,kFACjBoB,QAAQC,IAAI,aAAcM,EAAI3B,GACxB8C,E,wBAAuBnB,E,qBAENc,MAAMK,EAAK,CAC9BC,QAAS,CACL,eAAiB,oBAErBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBnD,OAAQA,M,cANV0C,E,gBASaA,EAASC,O,OAAtBrD,E,OACN8B,QAAQC,IAAI,wBAAyB/B,GACrCF,KAAKoD,U,sLAGUzB,G,gFACfK,QAAQC,IAAI,eAAgBN,G,yBAGL0B,M,gBAAW,CAC9BM,QAAS,CACL,eAAiB,oBAErBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBpC,SAAUA,M,cANZ2B,E,gBASaA,EAASC,O,OAAtBrD,E,OACN8B,QAAQC,IAAI,wBAAyB/B,GACrCF,KAAKoD,U,+KAGMY,EAAKpD,EAAQmB,G,oFACxBC,QAAQC,IAAI,UAAWrB,EAAQmB,GACzBL,EAAMd,EAAON,IACboD,E,wBAAuBM,E,oBAAetC,G,SAErB2B,MAAMK,EAAK,CAC9BC,QAAS,CACL,eAAiB,oBAErBC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CACjBhC,KAAMA,M,cANRuB,E,gBASaA,EAASC,O,OAAtBrD,E,OACN8B,QAAQC,IAAI,uBAAwB/B,GACpCF,KAAKoD,U,2IAsBC,IAAD,OACT,OACI,oCACI,wDACA,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAWL,KAAK,IAAI7C,KAAMF,KAAKW,MAAMwC,YACrC,kBAAC,EAAD,CAAUJ,KAAK,gBACLT,YAAa,SAACC,GAAD,OAAQ,EAAKD,YAAYC,IACtCF,WAAY,SAACE,EAAIJ,GAAL,OAAc,EAAKE,WAAWE,EAAIJ,IAC9CD,QAAS,SAAC8B,EAAKpD,EAAQmB,GAAd,OAAuB,EAAKG,QAAQ8B,EAAKpD,EAAQmB,MAGpE,kBAAC,EAAD,CAAagB,KAAK,kBAAkB7B,OAAQ,SAACV,GAAD,OAAW,EAAKyD,YAAYzD,OAE5E,mC,GAnIMC,aCFlByD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3c93b284.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\n\r\nclass Questions extends Component {\r\n    render() {\r\n        const mapFunction = elm =>\r\n            <li key={elm._id}>\r\n                <Link to={\"/question/\"+elm._id}>{elm.title}</Link>\r\n            </li>;\r\n\r\n        let questions = this.props.data;\r\n        let list = questions.map(mapFunction);\r\n\r\n        return (\r\n            <>\r\n                <ul>\r\n                    {list}\r\n                </ul>\r\n                <Link to=\"/Ask-a-question\">Ask a question</Link>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Questions;","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\n\r\nclass PostAnswer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            answer: \"\"\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit() {\r\n        this.props.submit(this.state.answer);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <input type=\"text\" placeholder=\"Your answer\" name=\"answer\" onChange={event => this.onChange(event)}/>\r\n                <br/>\r\n                <button onClick={_ => this.onSubmit()}>Add Answer</button>\r\n                <br/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostAnswer;","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\nimport PostAnswer from \"./PostAnswer\";\r\n\r\nclass Question extends Component {\r\n    upVote(aId, question) {\r\n        let answer = question.answers.find(a => a._id === aId);\r\n        let vote = answer.vote + 1;\r\n        console.log(aId, \"Downvoted\", answer, vote);\r\n        this.props.putVote(question._id, answer, vote)\r\n    }\r\n\r\n    downVote(aId, question) {\r\n        let answer = question.answers.find(a => a._id === aId);\r\n        let vote = answer.vote - 1;\r\n        console.log(aId, \"Downvoted\", answer, vote);\r\n        this.props.putVote(question._id, answer, vote)\r\n    }\r\n\r\n    addAnswer(text, question) {\r\n        const newAnswer = {\r\n            text: text,\r\n            vote: 0\r\n        };\r\n        this.props.postAnswer(question._id, newAnswer);\r\n    }\r\n\r\n\r\n    render() {\r\n        const question = this.props.getQuestion(this.props.id);\r\n        const mapFunction = (answer, index) =>\r\n            <li key={index}>\r\n                {answer.text}\r\n                <button onClick={() => this.upVote(answer._id, question)} style={{marginLeft: \"2vw\"}}>Up</button>\r\n                <span style={{margin: \"0 2vw\"}}>{answer.vote}</span>\r\n                <button onClick={() => this.downVote(answer._id, question)}>Down</button>\r\n            </li>;\r\n        let answersList = question.answers.map(mapFunction);\r\n\r\n        return (\r\n            <>\r\n                <h2>{question.title}</h2>\r\n                <h3>Answers:</h3>\r\n                <ul>\r\n                    {answersList}\r\n                </ul>\r\n                <PostAnswer path=\"/\" submit={(answer) => this.addAnswer(answer, question)}></PostAnswer>\r\n                <br/><br/>\r\n\r\n\r\n                <Link to=\"/\">Back to questions</Link>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\n\r\nclass AskQuestion extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"\"\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit() {\r\n        this.props.submit(this.state.title);\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <h2>Ask questions</h2>\r\n                <input type=\"text\" placeholder=\"Your question\" name=\"title\" onChange={event => this.onChange(event)}/>\r\n                <br/>\r\n                <Link to=\"/\"><button onClick={_ => this.onSubmit()}>Add question</button></Link>\r\n                <br/><br/>\r\n                <Link to=\"/\"> Go back</Link>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AskQuestion;","import React, {Component} from 'react';\r\nimport {Router} from \"@reach/router\";\r\nimport Questions from \"./Questions\";\r\nimport Question from \"./Question\";\r\nimport AskQuestion from \"./AskQuestion\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            questions: [\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n\r\n    //Fetch data from the API and putting it in the state\r\n    async getData() {\r\n        const url = \"/api/questions\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        this.setState({\r\n            questions: data\r\n        })\r\n    }\r\n\r\n    addQuestion(title) {\r\n        const newQuestion = {\r\n                title: title,\r\n                answers: []\r\n        };\r\n        this.postQuestion(newQuestion);\r\n    }\r\n//Used this before API\r\n/*        this.setState({\r\n            questions: [...this.state.questions, newQuestion]\r\n        });\r\n        // console.log(newQuestion);*/\r\n\r\n\r\n    getQuestion(id) {\r\n        const findFunction = question => question._id === id;\r\n        return this.state.questions.find(findFunction);\r\n    }\r\n\r\n    async postAnswer(id, answer) {\r\n        console.log(\"postAnswer\", id, answer);\r\n        const url = `/api/question/${id}/answers`;\r\n\r\n        const response = await fetch(url, {\r\n            headers: {\r\n                'Content-type' : 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                answer: answer\r\n            })\r\n        });\r\n        const data = await response.json();\r\n        console.log(\"Printing the response\", data);\r\n        this.getData();\r\n    }\r\n\r\n    async postQuestion(question) {\r\n        console.log(\"postQuestion\", question);\r\n        const url = `/api/question`;\r\n\r\n        const response = await fetch(url, {\r\n            headers: {\r\n                'Content-type' : 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                question: question\r\n            })\r\n        });\r\n        const data = await response.json();\r\n        console.log(\"Printing the response\", data);\r\n        this.getData();\r\n    }\r\n\r\n    async putVote (qId, answer, vote) {\r\n        console.log(\"PutVote\", answer, vote);\r\n        const aId = answer._id;\r\n        const url = `/api/question/${qId}/answers/${aId}`;\r\n\r\n        const response = await fetch(url, {\r\n            headers: {\r\n                'Content-type' : 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                vote: vote\r\n            })\r\n        });\r\n        const data = await response.json();\r\n        console.log(\"Putting the response\", data);\r\n        this.getData();\r\n    }\r\n\r\n//Used this before i had an API\r\n/*    updateQuestion(id, newAnswer) {\r\n        var questionsArr = this.state.questions.filter(q => {\r\n            return q.id !== id;\r\n        });\r\n\r\n        var question = this.state.questions.find(q => {\r\n            return q.id === id;\r\n        });\r\n\r\n        question.answers = [...question.answers, newAnswer];\r\n\r\n        questionsArr = [...questionsArr, question];\r\n\r\n        this.setState({\r\n            questions: questionsArr\r\n        });\r\n    }*/\r\n\r\n    render() {\r\n    return(\r\n        <>\r\n            <h1>Question and answers app</h1>\r\n            <Router>\r\n                <Questions path=\"/\" data={this.state.questions}></Questions>\r\n                <Question path=\"/question/:id\"\r\n                          getQuestion={(id) => this.getQuestion(id)}\r\n                          postAnswer={(id, text) => this.postAnswer(id, text)}\r\n                          putVote={(qId, answer, vote) => this.putVote(qId, answer, vote)}\r\n                >\r\n                </Question>\r\n                <AskQuestion path=\"/Ask-a-question\" submit={(title) => this.addQuestion(title)}></AskQuestion>\r\n            </Router>\r\n            <div>\r\n            </div>\r\n        </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}